/**
 * 재귀 (recursion)
 * 큰 목표 작업 하나를 동일하면서 간단한 작업 여러 개로 나눌수 있을때 유용한 프로그래밍 패턴이다.
 * 목표 작업을 간단한 동작 하나와 목표 작업을 변형한 작업으로 단순화시킬 수 있을 때도 재귀를 사용할수 있다.

 */

/****************************
 * 두가지 사고방식
 * 1. 반복적인 사고를 통한 방법 : for loop
 *
 * 2. 재귀적인 사고를 통한 방법 : 작업을 단순화하고 자기 자신을 호출한다.
 ***************************/

// for loop

// function pow(x, n) {
//   let result = 1;

//   // 반복문을 돌면서 x를 n번 곱함
//   for (let i = 0; i < n; i++) {
//     result *= x;
//   }
//   return result;
// }
// console.log(pow(2, 3));

/* recursion
n == 1 : 재귀의 베이스 라고 말한다. pow(x,1) 은 x로 

n == 1 아닐때! : pow(x,n) 은 x * pow(x,n-1) 로 표현이 가능하다.
수학식 = x^n = x * x^n-1 : 재귀단계 (recursive step)

--------------------------------------------------------------------------
재귀를 사용한 코드는 짧다!
if 대신 조건부 연산자 ? 를 사용하면 pow(x,n) 을 더 간결하고 읽기 쉽게 만들 수 있다.
function pow(x,n) {
    return (x == 1) ? x : (x * pow((x,n-1));
}
*/
// function pow(x, n) {
//   if (n == 1) {
//     return x;
//   } else {
//     return x * pow(x, n - 1);
//   }
// }
// console.log(pow(2, 3));

/**
 * 실행 컨텍스트와 스택
 *   실행 컨텍스트란? : 함수 실행에 있어 세부정보를 담고있는 내부 데이터 구조이다.
 *      - 제어 흐름의 현위치, 변수의 현재값, this의 값 등
 * 실행중인 함수의 실행 절차에 대한 정보는 해당 함수의 실행 컨텍스트에 저장된다!
 * 함수 호출 1회당 하나의 실행 컨텍스트가 생성된다.
 * 함수 내부에 중첩호출이 있을때는
 *  - 함수의 실행이 일시중지
 *  - 중지된 함수와 여노간된 컨텍스트는 "실행 컨텍스트 스택" 이라고 특별한 자료구조에 저장된다.
 *  - 중첩호출이 실행된다.
 *  - 중첩호출이 끝난이후 실행 컨텍스트 스택에서 일시 중단한 함수의 실행 컨텍스트를 꺼내고, 중단한 함수를 다시 이어간다.
 *
 */
